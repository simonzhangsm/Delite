/**
 * WriterKernelLib
 * Summary: Issue a write to DRAM (set enable high for nearest multiple of 384 bytes, or e.g. 96 floats)
 *  - needed or else simulation does not complete (buffers not empty)
 */

package engine;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
// import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
// import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
// import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
// import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream;
// import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;


class WriterKernel extends KernelLib {
 
  int image_size;
 
  public WriterKernel(KernelLib owner, int _image_size) {
    super(owner);
    image_size = _image_size;
  
  }

  
  void doIt(String outDataName, DFEVar real_len, DFEVar write_en, DFEVar outData) { 

    DFEVar out_en = dfeBool().newInstance(this);
    io.output(outDataName, outData, dfeFloat(8, 24),out_en); // SHADJIS TODO: pass type as parameter
    
    SMIO sm = addStateMachine("smWrite", new ReadWriteSM(this, image_size));
    sm.connectInput("in_en", write_en.cast(dfeBool()));
    sm.connectInput("real_len", real_len.cast(dfeUInt(32)) ); // SHADJIS TODO: optimize bit width
    out_en <== sm.getOutput("out_en");  
    
    //DFEVar tick = control.count.simpleCounter(32,1000);
    //debug.simPrintf("%d: write_en=%d,out_en=%d,outData=%f\n",tick,write_en,out_en,outData);
  
  }

}
